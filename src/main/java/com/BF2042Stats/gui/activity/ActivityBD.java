package com.BF2042Stats.gui.activity;

import com.BF2042Stats.data.CapacityPool;
import com.BF2042Stats.data.ConfigData;
import com.BF2042Stats.gui.ActivityMain;
import com.BF2042Stats.gui.dataclass.WriteList;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;

public class ActivityBD {
    private JPanel rootPanel;
    private JPanel layoutPanel;
    private JList<WriteList> list_bd;
    private JList<String> list_cap_bd;
    private JList<String> list_cap_nbd;
    private final DefaultListModel<WriteList> model_bd = new DefaultListModel<>();
    private final DefaultListModel<String> model_cap_bd = new DefaultListModel<>();
    private final DefaultListModel<String> model_cap_nbd = new DefaultListModel<>();
    private final Font font = ActivityMain.getInstance().getFont().deriveFont(12f);

    public ActivityBD() {
        init();
        bind();
    }

    private void bind() {
        list_bd.addListSelectionListener(listSelectionEvent -> {
            if (!listSelectionEvent.getValueIsAdjusting()) {
                int result = JOptionPane.showConfirmDialog(null, "你确定要删除这个绑定的数据吗？", "Confirmation", JOptionPane.YES_NO_OPTION);
                if (result == JOptionPane.YES_OPTION) {
                    int index = list_bd.getSelectedIndex();
                    if (index != -1) {
                        ConfigData.removeBD(model_bd.remove(index).getS1());
                    }
                } else if (result == JOptionPane.NO_OPTION) {
                    System.out.println("已取消");
                }
            }
        });
    }

    private void init() {
        list_bd.setFont(font);
        for (String s : ConfigData.getQq_gameID().keySet()) {
//            model_bd.addElement("qq:" + s + " ID: " + ConfigData.getQq_gameID().get(s).split("#")[0] + " 平台: " + ConfigData.getQq_gameID().get(s).split("#")[1]);
            model_bd.addElement(new WriteList(s, "qq:" + s + " ID: " + ConfigData.getQq_gameID().get(s).split("#")[0] + " 平台: " + ConfigData.getQq_gameID().get(s).split("#")[1]));
        }
        list_bd.setModel(model_bd);
        for (String s : CapacityPool.getPlayerName_Time_y().keySet()) {
            model_cap_bd.addElement("玩家：" + s + " 剩余时间：" + CapacityPool.getPlayerName_Time_y().get(s));
        }
        list_cap_bd.setModel(model_cap_bd);
        for (String s : CapacityPool.getPlayerName_Time_n().keySet()) {
            model_cap_nbd.addElement("玩家：" + s + " 剩余时间：" + CapacityPool.getPlayerName_Time_n().get(s));
        }
        list_cap_nbd.setModel(model_cap_nbd);
    }

//    public static void main(String[] args) {
//        JFrame jFrame = new JFrame();
//        jFrame.setSize(600, 600);
//        jFrame.setContentPane(new ActivityBD().$$$getRootComponent$$$());
//        jFrame.setVisible(true);
//    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        layoutPanel = new JPanel();
        layoutPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(layoutPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("绑定数据配置");
        layoutPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        list_cap_bd = new JList();
        layoutPanel.add(list_cap_bd, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("缓存池数据");
        layoutPanel.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        layoutPanel.add(scrollPane1, new GridConstraints(1, 0, 2, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        list_bd = new JList();
        scrollPane1.setViewportView(list_bd);
        list_cap_nbd = new JList();
        layoutPanel.add(list_cap_nbd, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
